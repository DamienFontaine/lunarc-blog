// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/DamienFontaine/lunarc-blog/service (interfaces: IArticleService)

package mock

import (
	model "github.com/DamienFontaine/lunarc-blog/model"
	gomock "github.com/golang/mock/gomock"
)

// Mock of IArticleService interface
type MockIArticleService struct {
	ctrl     *gomock.Controller
	recorder *_MockIArticleServiceRecorder
}

// Recorder for MockIArticleService (not exported)
type _MockIArticleServiceRecorder struct {
	mock *MockIArticleService
}

func NewMockIArticleService(ctrl *gomock.Controller) *MockIArticleService {
	mock := &MockIArticleService{ctrl: ctrl}
	mock.recorder = &_MockIArticleServiceRecorder{mock}
	return mock
}

func (_m *MockIArticleService) EXPECT() *_MockIArticleServiceRecorder {
	return _m.recorder
}

func (_m *MockIArticleService) Add(_param0 model.Article) (model.Article, error) {
	ret := _m.ctrl.Call(_m, "Add", _param0)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIArticleServiceRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockIArticleService) Delete(_param0 model.Article) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIArticleServiceRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockIArticleService) FindAll() ([]model.Article, error) {
	ret := _m.ctrl.Call(_m, "FindAll")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIArticleServiceRecorder) FindAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindAll")
}

func (_m *MockIArticleService) FindByStatus(_param0 string) ([]model.Article, error) {
	ret := _m.ctrl.Call(_m, "FindByStatus", _param0)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIArticleServiceRecorder) FindByStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByStatus", arg0)
}

func (_m *MockIArticleService) GetByID(_param0 string) (model.Article, error) {
	ret := _m.ctrl.Call(_m, "GetByID", _param0)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIArticleServiceRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByID", arg0)
}

func (_m *MockIArticleService) GetByPretty(_param0 string) (model.Article, error) {
	ret := _m.ctrl.Call(_m, "GetByPretty", _param0)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIArticleServiceRecorder) GetByPretty(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByPretty", arg0)
}

func (_m *MockIArticleService) Update(_param0 string, _param1 model.Article) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIArticleServiceRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1)
}
